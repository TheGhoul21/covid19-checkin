{"version":3,"sources":["Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["geolocated","props","React","width","height","latitude","longitude","zoom","viewport","setViewport","coords","onViewportChange","mapStyle","offsetLeft","offsetTop","Icon","color","name","size","Segment","loading","useState","visible","setVisible","Sidebar","Pushable","as","Container","animation","icon","inverted","onHide","horizontal","direction","fluid","Grid","style","marginTop","Row","textAlign","backgroundColor","columns","Column","Header","onClick","divided","Card","Image","src","wrapped","ui","Content","Pusher","overflow","Input","iconPosition","placeholder","Button","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25f55551.chunk.js","sourcesContent":["import * as React from 'react';\r\nimport ReactMapGL, { Marker } from 'react-map-gl';\r\nimport { Icon, Segment } from 'semantic-ui-react'\r\nimport { geolocated, GeolocatedProps } from 'react-geolocated';\r\nfunction Map(props: {} & GeolocatedProps) {\r\n\r\n\r\n    const [viewport, setViewport] = React.useState({ width:400, height:600, latitude:0, longitude:0, zoom:16});\r\n\r\n    React.useEffect(() => {\r\n        if (props.coords)\r\n            setViewport({\r\n                width: 400,\r\n                height: 600,\r\n                latitude: props.coords?.latitude,\r\n                longitude: props.coords?.longitude,\r\n                zoom: 16\r\n            })\r\n    }, [props.coords])\r\n\r\n    if (!props.coords) return <Segment loading></Segment>\r\n\r\n\r\n    return (\r\n        <ReactMapGL\r\n            {...viewport}\r\n            onViewportChange={setViewport}\r\n            mapStyle=\"https://api.maptiler.com/maps/basic/style.json?key=4S1PQcbnY3BJl06SPrhW\"\r\n        >\r\n            <Marker latitude={37.78} longitude={-122.41} offsetLeft={-0} offsetTop={-0}>\r\n                <Icon color=\"red\" name=\"map marker\" size=\"big\" />\r\n\r\n            </Marker>\r\n        </ReactMapGL>\r\n\r\n    );\r\n}\r\n\r\nexport default geolocated({})(Map);","import React, { Ref } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Map from './Map';\nimport { Feed, Button, Icon, Container, Sidebar, Segment, Menu, Grid, Header, Image, Card, Input } from 'semantic-ui-react'\nimport { geolocated, GeolocatedProps } from \"react-geolocated\";\n\nfunction App(props:{} & GeolocatedProps) {\n  const [visible, setVisible] = React.useState(false);\n  return (\n    <Sidebar.Pushable as={Segment}>\n      <Sidebar\n        as={Container}\n        animation='overlay'\n        icon='labeled'\n        inverted\n        onHide={() => setVisible(false)}\n        horizontal\n        direction='bottom'\n        visible={visible}\n        fluid\n\n      >\n        <Grid style={{ height:'100vh', marginTop:'30vh'}}>\n          <Grid.Row style={{}}>\n            <Grid\n              textAlign='center' style={{ height: '100vh', backgroundColor: 'white' }}\n            >\n\n              <Grid.Row columns={1}>\n                <Grid.Column>\n                  <Header as='h3' onClick={() => setVisible(false)}>Feed</Header>\n                </Grid.Column>\n              </Grid.Row>\n              <Grid.Row>\n                <Grid columns={2} divided>\n                  <Grid.Column>\n                    <Card>\n                      <Card.Header>Oggi</Card.Header>\n                      <Image src='https://semantic-ui.com/images/avatar/large/elliot.jpg' wrapped ui={false} />\n                      <Card.Content>5.000 sono a casa</Card.Content>\n                    </Card>\n                  </Grid.Column>\n                  <Grid.Column>\n                    <Card>\n                      <Card.Header>Totale</Card.Header>\n                      <Image src='https://semantic-ui.com/images/avatar/large/elliot.jpg' wrapped ui={false} />\n                      <Card.Content>100.000 sono a casa</Card.Content>\n                    </Card>\n                  </Grid.Column>\n                </Grid>\n              </Grid.Row>\n              <Grid.Row>Regioni</Grid.Row>\n              <Grid.Row>\n                <Grid.Column>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                  <Grid.Row>Abruzzo</Grid.Row>\n                </Grid.Column>\n              </Grid.Row>\n            </Grid>\n          </Grid.Row></Grid>\n      </Sidebar>\n      <Sidebar.Pusher>\n        <Container style={{ width:'100vw', height:'100vh', overflow:'none'}} >\n          <Header  textAlign='center'>Nome progetto</Header>\n          <Segment><Icon name='home'/> Caterina Ã¨ a casa a Treviso</Segment>\n          <Segment> <Input icon='searchengin' iconPosition='left' placeholder='Cerca e fai check-in' fluid /></Segment>\n          <Map />\n          <Button fluid onClick={() => setVisible(true)}>Guarda feed</Button>\n        </Container>\n      </Sidebar.Pusher>\n    </Sidebar.Pushable>\n\n  );\n}\n\nexport default geolocated({})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}